import{_ as a,Y as t,Z as i,$ as n,a0 as l,a1 as o,a2 as s,E as p}from"./framework-945e1ba3.js";const c={},r=s('<h1 id="个人博客项目" tabindex="-1"><a class="header-anchor" href="#个人博客项目" aria-hidden="true">#</a> 个人博客项目</h1><p>项目描述：参考多个知名开源博客网站，实现自己个人博客网站 前后端分离项目，项目采用Maven多模块管理，前端页面和后台管理页面的功能模块分离。前端使用Vue + ElementUI，后端SpringSecurity + jwt做安全认证。使用Redis做缓存，MySQL持久化用户和博客数据。实现了基本的撰写博文，博文评论，用户注册登录，分类展示等功能。</p><p>页面：Vue + Element 持久化存储：nysql + mybatisplus 权限：springsecurity + jwt 缓存：redis(luttuce) 对象存储：七牛云 api接口文档：swagger2 导出表单：easyexcel 定时任务：springschedule</p><p>数据传输对象的封装VO DTO PO</p><h2 id="前端frontend-endpoint" tabindex="-1"><a class="header-anchor" href="#前端frontend-endpoint" aria-hidden="true">#</a> 前端FrontEnd(endpoint)</h2><ul><li>jwt</li></ul><p>jwt的结构</p><ol><li>第一部分为头部（header)，声明类型jwt和加密算法</li><li>第二部分为载荷（payload)，存放相应数据的地方</li><li>第三部分是签名（signature)，对前面两个部分base64加密再和秘钥进行加密</li></ol><ul><li>注册</li></ul><p>使用的是邮箱发送验证码</p><ul><li>登录，spring验证流程</li></ul><p>配置好spring security，本质是一个过滤器链。发起登录请求，LoginServiceImpl处理登录</p><ol><li>经过UsernamePasswordAuthentication 验证登录的用户名和密码，返回token对象</li><li>调用ProviderManager的authenticate方法进行认证</li><li>内部再调用UserDetailsService的loadUserByUsername获取用户信息和权限信息，返回UserDetail对象</li><li>PasswordEncoder验证密码，正确则封装权限到Authentication</li><li>查询到用户信息后根据userid生成token</li><li>redis存入LoginUser</li><li>token响应给前端</li></ol><p>前端如何保存token? JWT可以在浏览器中保存在localStorage或者sessionStorage中，而不需要使用cookie来保存。</p>',14),u={href:"https://blog.csdn.net/qq_28134589/article/details/107318742",target:"_blank",rel:"noopener noreferrer"},d=s(`<p>Cookie 保存在浏览器端，Session 保存在服务端</p><ul><li>权限校验</li></ul><p>JwtAuthenticationTokenFilter，从请求头中拿到token，解析验证token返回Claim对象，从Claim对象中拿到userid。从redis中根据userid拿到LoginUser对象。如果redis不存在说明登录过期，需要重新登录。用户和权限信息存入SecurityContextHolder，这样访问需要验证权限的</p><ul><li>发送博文</li></ul><p>本来参照源码，他那个是后端才可以发送博文，我给复制了那一部分添加到前端页面来了</p><ul><li>点赞统计功能</li></ul><p>同一个用户只能点赞一次，使用一个set存储用户id，持久化点赞数据，关联表用文章id，点赞用户id</p><ul><li>浏览量功能</li></ul><p>查询将检查文章的浏览量在redis中有没有，如果有就取出浏览量，没有就查询数据库再缓存到redis，用文章业务地址和id做主键，存入数据库查到的浏览量。然后定时任务是拿出缓存的浏览量更新到数据库，再把redis缓存的文章浏览量删掉。</p><p>程序终止任务，把缓存数据写入数据库</p><h2 id="后端backend" tabindex="-1"><a class="header-anchor" href="#后端backend" aria-hidden="true">#</a> 后端BackEnd</h2><p>后端做一些基本的用户信息数据权限、博文状态、标签种类然后还有一个写博文等基础的操作，不同权限账户展示的页面不同，差不多都是基本的增删改查操作。比如查询所有标签以及层级关系，添加标签，设置父标签，设置标签是否可用。</p><p>可以使用阿里的easyexcel导出， @ExcelProperty注明列名，list写入每行数据</p><h2 id="框架framework" tabindex="-1"><a class="header-anchor" href="#框架framework" aria-hidden="true">#</a> 框架Framework</h2><ul><li>启动任务和终止任务，定时任务（都需要注册为component，由sprig管理）</li></ul><p>@PostConstruct 构造函数之后，init方法之前执行 该方法不得有任何参数，除非是在 EJB 拦截器 (interceptor) 的情况下，根据 EJB 规范的定义，在这种情况下它将带有一个 InvocationContext 对象；该方法的返回类型必须为 void；该方法不得抛出已检查异常；应用 PostConstruct 的方法可以是 public、protected、package private 或 private；除了应用程序客户端之外，该方法不能是 static；该方法可以是 final；如果该方法抛出未检查异常，那么不得将类放入服务中，除非是能够处理异常并可从中恢复的 EJB。 @PreDestroy 被修饰的方法会在Servlet的destroy()方法之后运行，在Servlet被彻底卸载之前 @PreDestroy已经从jdk 11版本开始移除了，所以在使用时需要额外引入javax.annotation-api</p><p>启动任务实现CommandLineRunner接口的run方法 终止任务实现DisposableBean接口，在destroy方法中写逻辑 定时任务<code>@Scheduled(cron = &quot;0 0/10 * * * ?&quot;)</code> + <code>@PreDestroy</code>需要先开启@EnableScheduling</p><ul><li>全局异常</li></ul><p>@RestControllerAdvice标记处理类 @ExceptionHandler(xxException.class)匹配异常，用于处理方法上</p><ul><li>复制实体</li></ul><p>方法是<code>public static &lt;T&gt; T copyBean(Object source, Class&lt;T&gt; target)</code> T result = target.new Instance(); 内部BeanUtils.copyProperties()是一个浅拷贝，也就是创建一个新的目标对象，里面的属性还是指向原来的对象中的</p><p>深拷贝的方法 对象实现序列化接口，先将对象转为对象流，然后在readObject反序列化。 json序列化与反序列化创建</p><ul><li><p>Jwt工具类</p></li><li><p>Redis缓存工具类</p></li><li><p>SpringSecurity</p></li></ul><p>SecurityContextHolder每个线程都有自己的SecurityContextHolder 不设置存储策略默认就是MODE_THREADLOCAL，使用ThreadLocal对象实现 保存Authentication信息</p><ul><li>自定义注解和切面</li></ul><p>自定义注解：主要是设置作用域@Target 常用(TYPE,FIELD,METHOD,PARAMETER,CONSTRUCTOR,) @Documented javadoc @Retention 注解保留策略 SOURCE, 注解会编译后丢弃 CLASS, 注释保留在编译后文件中，但是不需要jvm运行时保留 RUNTIME, 注释保留在编译后文件中，并在jvm运行时保留，可以通过反射获取</p><p>切面类spel表达式获取使用注解为切点 环绕通知增强 ret = joinPoint.proceed(); 方法对象拿到上面的注解对象 注解对象可以用来打印注解的参数信息，注解类型等</p><ul><li>自定义redis序列化器并且设置redis序列化器</li></ul><p>RedisSerializer，设置键的序列化器和值的序列化器</p><ul><li><p>mybatisPlus分页器设置，元数据注入（自动填充）</p></li><li><p>处理跨域WebConfig implements WebMvcConfigurer</p></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addCorsMappings</span><span class="token punctuation">(</span><span class="token class-name">CorsRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 设置允许跨域的路径</span>
    registry<span class="token punctuation">.</span><span class="token function">addMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/**&quot;</span><span class="token punctuation">)</span>
            <span class="token comment">// 设置允许跨域请求的域名</span>
            <span class="token punctuation">.</span><span class="token function">allowedOriginPatterns</span><span class="token punctuation">(</span><span class="token string">&quot;*&quot;</span><span class="token punctuation">)</span>
            <span class="token comment">// 是否允许cookie</span>
            <span class="token punctuation">.</span><span class="token function">allowCredentials</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
            <span class="token comment">// 设置允许的请求方式</span>
            <span class="token punctuation">.</span><span class="token function">allowedMethods</span><span class="token punctuation">(</span><span class="token string">&quot;GET&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;POST&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;DELETE&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;PUT&quot;</span><span class="token punctuation">)</span>
            <span class="token comment">// 设置允许的header属性</span>
            <span class="token punctuation">.</span><span class="token function">allowedHeaders</span><span class="token punctuation">(</span><span class="token string">&quot;*&quot;</span><span class="token punctuation">)</span>
            <span class="token comment">// 跨域允许时间</span>
            <span class="token punctuation">.</span><span class="token function">maxAge</span><span class="token punctuation">(</span><span class="token number">3600</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>更新文章</li></ul><p>先更新到数据库，然后删除redis中的缓存 如果是先删除redis缓存，然后再更新数据库这个时候</p>`,33);function k(m,v){const e=p("ExternalLinkIcon");return t(),i("div",null,[r,n("p",null,[n("a",u,[l("localStorage"),o(e)])]),d])}const h=a(c,[["render",k],["__file","2个人博客项目.html.vue"]]);export{h as default};
