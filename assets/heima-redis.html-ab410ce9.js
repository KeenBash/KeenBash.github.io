import{_ as e,Y as o,Z as c,$ as n,a0 as s,a1 as t,a2 as a,E as l}from"./framework-945e1ba3.js";const i={},u=a(`<h1 id="hmdp-redis" tabindex="-1"><a class="header-anchor" href="#hmdp-redis" aria-hidden="true">#</a> hmdp-redis</h1><p>maptobean</p><p>beantomap</p><p>copybean</p><p>copybeanlist</p><h2 id="短信登录" tabindex="-1"><a class="header-anchor" href="#短信登录" aria-hidden="true">#</a> 短信登录</h2><p>tomcat sessionid session</p><p>保存验证码</p><p>发送验证码</p><p>校验验证码</p><h3 id="登录校验" tabindex="-1"><a class="header-anchor" href="#登录校验" aria-hidden="true">#</a> 登录校验</h3><p>拦截器</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerInterceptor</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token comment">// 获取请求携带的session</span>
        <span class="token class-name">HttpSession</span> session <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 获取session中的用户</span>
        <span class="token class-name">UserDTO</span> user <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">UserDTO</span><span class="token punctuation">)</span> session<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token class-name">SystemConstants</span><span class="token punctuation">.</span><span class="token constant">LOGIN_USER_PREFIX</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 用户不存在，拦截</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>user <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token comment">// 返回状态，应该统一处理形式</span>
            response<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token number">401</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 存在，保存用户信息到ThreadLocal</span>
        <span class="token comment">// todo: 为什么放ThreadLocal，为了线程内</span>
        <span class="token class-name">UserDtoHolder</span><span class="token punctuation">.</span><span class="token function">saveUser</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 放行</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterCompletion</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">,</span> <span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token comment">// 这个在什么时候执行？</span>
        <span class="token class-name">UserDtoHolder</span><span class="token punctuation">.</span><span class="token function">removeUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>保存用户信息到ThreadLocal（为什么）类似context为了对象信息共享</p><h3 id="session共享问题" tabindex="-1"><a class="header-anchor" href="#session共享问题" aria-hidden="true">#</a> session共享问题</h3><p>多台tomcat并不共享session存储空间，当请求切换到不同tomcat服务时导致数据丢失问题</p><p>解决办法，换用redis</p><h3 id="redis" tabindex="-1"><a class="header-anchor" href="#redis" aria-hidden="true">#</a> redis</h3><p>拦截器加@Component不行？</p><p>拦截器链</p><h2 id="商户查询缓存" tabindex="-1"><a class="header-anchor" href="#商户查询缓存" aria-hidden="true">#</a> 商户查询缓存</h2><h3 id="缓存更新策略" tabindex="-1"><a class="header-anchor" href="#缓存更新策略" aria-hidden="true">#</a> 缓存更新策略</h3><p>内存淘汰 超时剔除 主动更新</p><p>主动更新策略：删除缓存、更新缓存</p><p>保证缓存与数据库操作的同时成功或失败</p><p>单体事务，分布式tcc</p><p>先操作数据库再删除缓存</p><p>（延迟双删？）</p>`,28),k={href:"https://blog.csdn.net/weixin_63326871/article/details/129313018",target:"_blank",rel:"noopener noreferrer"},d=a(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@JsonDeserialize</span><span class="token punctuation">(</span>using <span class="token operator">=</span> <span class="token class-name">LocalDateTimeDeserializer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@JsonSerialize</span><span class="token punctuation">(</span>using <span class="token operator">=</span> <span class="token class-name">LocalDateTimeSerializer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@JsonIgnore</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="缓存穿透" tabindex="-1"><a class="header-anchor" href="#缓存穿透" aria-hidden="true">#</a> 缓存穿透</h3><p>缓存穿透是指客户端请求的数据在缓存和数据库都不存在</p><p>缓存空对象，缓存空值到redis，但是如果id都不一样，造成内存消耗，可以设置ttl，但是也会有短期数据不一致</p><p>布隆过滤器，查询redis之前加一层，不存在的时候一定不存在，存在的时候可能不存在</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 缓存穿透
 *
 * <span class="token keyword">@param</span> <span class="token parameter">id</span> 店铺id
 * <span class="token keyword">@return</span> shop
 */</span>
<span class="token keyword">private</span> <span class="token class-name">Shop</span> <span class="token function">queryWithPassThrough</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 从redis查询商铺缓存</span>
    <span class="token class-name">Shop</span> shop<span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        shop <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Shop</span><span class="token punctuation">)</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token constant">CACHE_SHOP_KEY</span> <span class="token operator">+</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassCastException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 说明存的是空值</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 判断是否存在</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>shop <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// redis中有数据直接返回</span>
        <span class="token keyword">return</span> shop<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 查数据库</span>
    shop <span class="token operator">=</span> <span class="token function">getById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 数据库不存在，返回错误</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>shop <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 空值写入redis</span>
        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token constant">CACHE_SHOP_KEY</span> <span class="token operator">+</span> id<span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token constant">CACHE_NULL_TTL</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MINUTES</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 存在，写入redis</span>
    redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token constant">CACHE_SHOP_KEY</span> <span class="token operator">+</span> id<span class="token punctuation">,</span> shop<span class="token punctuation">,</span> <span class="token constant">CACHE_SHOP_TTL</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MINUTES</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> shop<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="缓存雪崩" tabindex="-1"><a class="header-anchor" href="#缓存雪崩" aria-hidden="true">#</a> 缓存雪崩</h3><p>缓存雪崩是指同一时段大量的缓存key失效或者redis服务器宕机</p><p>分散过期时间，比如加随机值</p><p>redis集群</p><p>给缓存降级限流策略</p><p>添加多级缓存</p><h3 id="缓存击穿" tabindex="-1"><a class="header-anchor" href="#缓存击穿" aria-hidden="true">#</a> 缓存击穿</h3><p>热点key，被高并发访问并且缓存重建业务较复杂的key突然失效了，大量访问直击数据库</p><p>互斥锁，重建线程获取锁，其他线程获取锁失败休眠一会再重试，性能差</p><p>逻辑过期，（热点数据永不过期？），值添加expire: xxx，如果发现逻辑时间已过期，获取锁，开新线程完成重建，写入缓存重置逻辑过期时间，自己返回旧数据，其他线程获取锁失败在未完成重建时也返回旧数据，数据一致性问题</p><p><img src="https://s2.loli.net/2023/03/31/LndB8PIz2aF9V1C.png" alt="图 1" loading="lazy"></p><h4 id="互斥锁" tabindex="-1"><a class="header-anchor" href="#互斥锁" aria-hidden="true">#</a> 互斥锁</h4><p>setnx key不存在才往里面写，key存在无法写，只能set写</p><p>也就是 setnx lock 获取锁，del lock 释放锁，防止出现问题，设置有效期</p><p>可以拆分过程<br> 1.查询缓存<br> 2.重建<br> 2.1获取锁<br> 2.2查数据库，写回redis<br> 2.3释放锁</p>`,21),r={href:"https://blog.csdn.net/kk_lzvvkpj/article/details/129860590",target:"_blank",rel:"noopener noreferrer"},v=a(`<p>postman可以多线程模拟高并发发起请求吗？不能，是串行</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 缓存击穿，互斥锁
 *
 * <span class="token keyword">@param</span> <span class="token parameter">id</span> 店铺id
 * <span class="token keyword">@return</span> shop
 */</span>
<span class="token keyword">private</span> <span class="token class-name">Shop</span> <span class="token function">queryWithMutex</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 从redis查询商铺缓存</span>
    <span class="token class-name">Shop</span> shop<span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        shop <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Shop</span><span class="token punctuation">)</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token constant">CACHE_SHOP_KEY</span> <span class="token operator">+</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassCastException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 判断是否存在</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>shop <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// redis中有数据直接返回</span>
        <span class="token keyword">return</span> shop<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 缓存重建</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token comment">// 获取互斥锁</span>
        <span class="token keyword">boolean</span> isLock <span class="token operator">=</span> <span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token constant">LOCK_SHOP_KEY</span> <span class="token operator">+</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 判断是否成功</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isLock<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 失败，休眠重试</span>
            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// todo: 查询重试，等待重建好。改while？自旋？</span>
            <span class="token keyword">return</span> <span class="token function">queryWithMutex</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 获取锁成功，查数据库</span>
        shop <span class="token operator">=</span> <span class="token function">getById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 模拟重建延时</span>
        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 不存在，返回错误</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>shop <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 空值写入redis</span>
            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token constant">CACHE_SHOP_KEY</span> <span class="token operator">+</span> id<span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token constant">CACHE_NULL_TTL</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MINUTES</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 存在，写入redis</span>
        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token constant">CACHE_SHOP_KEY</span> <span class="token operator">+</span> id<span class="token punctuation">,</span> shop<span class="token punctuation">,</span> <span class="token constant">CACHE_SHOP_TTL</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MINUTES</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
        <span class="token comment">// 释放互斥锁</span>
        <span class="token function">unLock</span><span class="token punctuation">(</span><span class="token constant">LOCK_SHOP_KEY</span> <span class="token operator">+</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> shop<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Boolean</span> lock <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setIfAbsent</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token constant">LOCK_SHOP_TTL</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 底层拆箱机制会调用booleanValue()会造成空指针异常</span>
    <span class="token keyword">return</span> <span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token constant">TRUE</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">unLock</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    redisTemplate<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="逻辑过期" tabindex="-1"><a class="header-anchor" href="#逻辑过期" aria-hidden="true">#</a> 逻辑过期</h4><p>数据<strong>预热</strong>，一定需要先预热热点key</p><p>获取锁成功应该再次检测redis缓存是否过期。如果存在无需重建？释放锁的同时其他线程拿到了锁</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ExecutorService</span> <span class="token constant">CACHE_REBUILD_EXECUTOR</span> <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
* 缓存击穿，逻辑过期
*
* <span class="token keyword">@param</span> <span class="token parameter">id</span> 店铺id
* <span class="token keyword">@return</span> shop
*/</span>
<span class="token keyword">private</span> <span class="token class-name">Shop</span> <span class="token function">queryWithLogicalExpire</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 从redis查询商铺缓存</span>
    <span class="token class-name">RedisData</span> redisData<span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        redisData <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">RedisData</span><span class="token punctuation">)</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token constant">CACHE_SHOP_KEY</span> <span class="token operator">+</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassCastException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 说明存的是空值</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>redisData <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 检查逻辑过期时间</span>
    <span class="token class-name">LocalDateTime</span> localDateTime <span class="token operator">=</span> redisData<span class="token punctuation">.</span><span class="token function">getExpireTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Shop</span> shop <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Shop</span><span class="token punctuation">)</span> redisData<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 未过期</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>localDateTime<span class="token punctuation">.</span><span class="token function">isAfter</span><span class="token punctuation">(</span><span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> shop<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 过期重建</span>
    <span class="token comment">// 获取互斥锁</span>
    <span class="token keyword">boolean</span> isLock <span class="token operator">=</span> <span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token constant">LOCK_SHOP_KEY</span> <span class="token operator">+</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 判断是否成功</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>isLock<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 成功，创建新线程重建</span>
        <span class="token constant">CACHE_REBUILD_EXECUTOR</span><span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token function">saveShopToRedis</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> <span class="token number">60L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
                <span class="token comment">// 释放互斥锁</span>
                <span class="token function">unLock</span><span class="token punctuation">(</span><span class="token constant">LOCK_SHOP_KEY</span> <span class="token operator">+</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 返回的是旧的数据，存在数据不一致问题</span>
    <span class="token keyword">return</span> shop<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="缓存工具封装" tabindex="-1"><a class="header-anchor" href="#缓存工具封装" aria-hidden="true">#</a> 缓存工具封装</h3><p><img src="https://s2.loli.net/2023/04/01/LHpdqEbDK8Vzhki.png" alt="图 2" loading="lazy"></p><h2 id="优惠券秒杀" tabindex="-1"><a class="header-anchor" href="#优惠券秒杀" aria-hidden="true">#</a> 优惠券秒杀</h2><h3 id="全局唯一id" tabindex="-1"><a class="header-anchor" href="#全局唯一id" aria-hidden="true">#</a> 全局唯一id</h3><blockquote><p>构造器注入原来不需要加 <code>@Autowire</code>，只要注册为了组件吧 配合前端加密传输与后端解密 MVCC机制?多版本并发控制</p></blockquote><p>全局id生成器，高可用、唯一性、高性能、递增性、安全性</p><p>不使用自增id，id规律太明显，受单表数据量的限制</p><p>（雪花算法？）</p><p>符号位 时间戳31bit 序列号32bit<br> 0 - 0000000 00000000 00000000 - 00000000 00000000 00000000 00000000</p><ul><li>符号位永远为0</li><li>时间戳，以秒为单位</li><li>秒内计算器，支持每秒产生2^32个不同id</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisIdGenerator</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> <span class="token constant">BEGIN_TIMESTAMP</span> <span class="token operator">=</span> <span class="token number">1672531200L</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">SERIAL_BIT</span> <span class="token operator">=</span> <span class="token number">32</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">StringRedisTemplate</span> redisTemplate<span class="token punctuation">;</span>


    <span class="token keyword">public</span> <span class="token class-name">RedisIdGenerator</span><span class="token punctuation">(</span><span class="token class-name">StringRedisTemplate</span> redisTemplate<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>redisTemplate <span class="token operator">=</span> redisTemplate<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">nextId</span><span class="token punctuation">(</span><span class="token class-name">String</span> keyPrefix<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">// 生成时间戳</span>
        <span class="token class-name">LocalDateTime</span> now <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">long</span> subTimestamp <span class="token operator">=</span> now<span class="token punctuation">.</span><span class="token function">toEpochSecond</span><span class="token punctuation">(</span><span class="token class-name">ZoneOffset</span><span class="token punctuation">.</span><span class="token constant">UTC</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token constant">BEGIN_TIMESTAMP</span><span class="token punctuation">;</span>

        <span class="token comment">// redis生成序列号</span>
        <span class="token class-name">String</span> date <span class="token operator">=</span> now<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token string">&quot;yyyy:MM:dd&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Long</span> count <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token string">&quot;icr:&quot;</span> <span class="token operator">+</span> keyPrefix <span class="token operator">+</span> <span class="token string">&quot;:&quot;</span> <span class="token operator">+</span> date<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 拼接并返回</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1L</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> subTimestamp <span class="token operator">&lt;&lt;</span> <span class="token constant">SERIAL_BIT</span> <span class="token operator">|</span> count<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="实现优惠券秒杀下单" tabindex="-1"><a class="header-anchor" href="#实现优惠券秒杀下单" aria-hidden="true">#</a> 实现优惠券秒杀下单</h3><h3 id="超卖问题" tabindex="-1"><a class="header-anchor" href="#超卖问题" aria-hidden="true">#</a> 超卖问题</h3><p><img src="https://s2.loli.net/2023/04/02/WRoV7nNK3zJyLer.png" alt="图 3" loading="lazy"></p><p>加锁</p><p>悲观锁&amp;乐观锁</p><p>乐观锁</p><p>版本号法</p><p>CAS自旋</p><p>查询时的库存和修改时的库存</p>`,26),m={href:"https://blog.csdn.net/zhizhengguan/article/details/122112773",target:"_blank",rel:"noopener noreferrer"},b=a(`<h3 id="一人一单" tabindex="-1"><a class="header-anchor" href="#一人一单" aria-hidden="true">#</a> 一人一单</h3><blockquote><p>nginx反代</p></blockquote><p>但是集群模式下单机锁synchronized会失效</p><p>Idea模拟集群</p><h2 id="分布式锁" tabindex="-1"><a class="header-anchor" href="#分布式锁" aria-hidden="true">#</a> 分布式锁</h2><p>分布式锁，多进程可见、互斥、高可用、高性能、安全性</p><p>Mysql、Redis、Zookeeper</p><p><img src="https://s2.loli.net/2023/04/03/3hMGo2fRmPl4xZT.png" alt="图 4" loading="lazy"></p><p>setnx🔒</p><h3 id="分布式锁误删问题" tabindex="-1"><a class="header-anchor" href="#分布式锁误删问题" aria-hidden="true">#</a> 分布式锁误删问题</h3><p><img src="https://s2.loli.net/2023/04/03/uVyNcYqQZE2vM3d.png" alt="图 5" loading="lazy"></p><p>释放锁把其他锁删了，释放时判断自己线程和锁的线程是不是同一个（但是不同进程线程id可能一样，加uuid）</p><p>但是只能解决误删，还是有可能两个线程进入业务代码</p><h3 id="分布式锁的原子性问题" tabindex="-1"><a class="header-anchor" href="#分布式锁的原子性问题" aria-hidden="true">#</a> 分布式锁的原子性问题</h3><p>判断以为是自己的锁的时候，stw</p><p>lua脚本解决多条命令原子性问题</p><p>redis.call(&#39;set&#39;, &#39;name&#39;, &#39;jack&#39;)</p><p>eval &quot;return redis.call(&#39;set&#39;, &#39;name&#39;, &#39;jack&#39;)&quot; 0代表需要key类型参数个数</p><p>eval &quot;return redis.call(&#39;set&#39;, KEYS[1], ARGV[1])&quot; 1 name rose</p><p>取参数 KEYS[] ARGV[] 一定大写</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code> <span class="token comment">-- 比较线程标示与锁中的标示是否一致</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">&#39;get&#39;</span><span class="token punctuation">,</span> KEYS<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=</span> ARGV<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> 
<span class="token keyword">then</span>
    <span class="token comment">-- 释放锁</span>
    <span class="token keyword">return</span> redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">&#39;del&#39;</span><span class="token punctuation">,</span> KEYS<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">end</span>
<span class="token keyword">return</span> <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">DefaultRedisScript</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> <span class="token constant">UNLOCK_SCRIPT</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token punctuation">{</span>
    <span class="token constant">UNLOCK_SCRIPT</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultRedisScript</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token constant">UNLOCK_SCRIPT</span><span class="token punctuation">.</span><span class="token function">setLocation</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ClassPathResource</span><span class="token punctuation">(</span><span class="token string">&quot;unlock.lua&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token constant">UNLOCK_SCRIPT</span><span class="token punctuation">.</span><span class="token function">setResultType</span><span class="token punctuation">(</span><span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token constant">TYPE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

stringRedisTemplate<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token constant">UNLOCK_SCRIPT</span><span class="token punctuation">,</span>
        <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">singletonList</span><span class="token punctuation">(</span><span class="token constant">KEY_PREFIX</span> <span class="token operator">+</span> lockName<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token constant">THREAD_ID_PREFIX</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="redisson" tabindex="-1"><a class="header-anchor" href="#redisson" aria-hidden="true">#</a> Redisson</h2><p>不可重入，同一个线程无法多次获取同一把锁</p><p>不可重试，获取锁只尝试一次就返回false，没有重试机制</p><p>超时释放，执行业务时间长导致锁释放</p><p>主从一致性问题，redis集群主从同步存在延迟，写主读从</p><p>Redisson是一个在redis的基础上实现的java驻内存数据网格（in-memory data grid），分布式工具集合，包括分布式锁</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">RedissonClient</span> <span class="token function">redissonClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 配置Redisson</span>
    <span class="token class-name">Config</span> config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// config.useClusterServers()设置多节点</span>
    config<span class="token punctuation">.</span><span class="token function">useSingleServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span><span class="token string">&quot;redis://192.168.73.130:6379&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">&quot;12345678&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token class-name">Redisson</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">RLock</span> lock <span class="token operator">=</span> redissonClient<span class="token punctuation">.</span><span class="token function">getLock</span><span class="token punctuation">(</span><span class="token string">&quot;keyName&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 尝试获取锁</span>
        <span class="token keyword">boolean</span> isLock <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="redisson可重入锁原理" tabindex="-1"><a class="header-anchor" href="#redisson可重入锁原理" aria-hidden="true">#</a> Redisson可重入锁原理</h3><p>存储哈希结构，但是哈希没有setnx</p><p><img src="https://s2.loli.net/2023/04/03/zSsYEUpwjIcrKDV.png" alt="图 6" loading="lazy"></p><p><img src="https://s2.loli.net/2023/04/03/1nGvdKzmiVaxuI6.png" alt="图 7" loading="lazy"></p><p>底层lua脚本来保证原子性</p><h3 id="锁重试和watchdog机制" tabindex="-1"><a class="header-anchor" href="#锁重试和watchdog机制" aria-hidden="true">#</a> 锁重试和watchdog机制?</h3><p>发布订阅</p><p>看门狗</p><h2 id="秒杀优化" tabindex="-1"><a class="header-anchor" href="#秒杀优化" aria-hidden="true">#</a> 秒杀优化</h2><h3 id="异步秒杀思路" tabindex="-1"><a class="header-anchor" href="#异步秒杀思路" aria-hidden="true">#</a> 异步秒杀思路</h3><blockquote><p>lua库存没有也会报错</p></blockquote><p>先让你抢到单，然后再慢慢异步扣减数据库</p><p>订单缓存redis</p><p>set</p><p><img src="https://s2.loli.net/2023/04/04/Xc8ZOjYqMaGRBgp.png" alt="图 9" loading="lazy"></p><ol><li>新增秒杀优惠券的同时，将优惠券信息保存到Redis中</li><li>基于lua脚本，判断秒杀库存、一人一单，决定用户是否抢购成功</li><li>如果抢购成功，将优惠券id和用户id封装后存入阻塞队列</li><li>开启线程任务，不断从阻塞队列中获取信息，实现异步下单功能</li></ol><p>jdk内部阻塞队列有安全问题等</p><h2 id="redis消息队列" tabindex="-1"><a class="header-anchor" href="#redis消息队列" aria-hidden="true">#</a> Redis消息队列</h2><p>消息队列（Message Queue）</p><ul><li>消息队列：存储和管理消息</li><li>生产者：发送消息到消息队列</li><li>消费者：从消息队列获取消息并处理消息</li></ul><p>redis实现消息队列</p><ul><li>list blpush, brpop</li><li>PubSub 发布订阅</li><li>Stream</li></ul><h2 id="达人探店" tabindex="-1"><a class="header-anchor" href="#达人探店" aria-hidden="true">#</a> 达人探店</h2><h3 id="发布探店笔记" tabindex="-1"><a class="header-anchor" href="#发布探店笔记" aria-hidden="true">#</a> 发布探店笔记</h3><p>标题文字图片</p><p>评论</p><p>todo: 改对象存储</p><h3 id="查看探店笔记" tabindex="-1"><a class="header-anchor" href="#查看探店笔记" aria-hidden="true">#</a> 查看探店笔记</h3><blockquote><p>不需要先登录才能看笔记</p></blockquote><h3 id="点赞功能" tabindex="-1"><a class="header-anchor" href="#点赞功能" aria-hidden="true">#</a> 点赞功能</h3><blockquote><p>点赞这种数据和评论放mongodb 需要知道是谁点的赞而且要持久化保存 可以MySQl保存一个关联表，（第一次从数据库取点赞id缓存）然后redis先缓存，在异步定时任务写入数据库 如果点赞数据是先在前端增加，检测到刷新，退出，以及设定的时间等才提交点赞数据</p></blockquote><p>同一个用户只能点赞一次，再次点击则取消点赞</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">isBlogLiked</span><span class="token punctuation">(</span><span class="token class-name">Blog</span> blog<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 判断当前用户是否点赞</span>
    <span class="token class-name">Long</span> userId <span class="token operator">=</span> <span class="token class-name">UserDtoHolder</span><span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> blogKey <span class="token operator">=</span> <span class="token constant">BLOG_LIKED_KEY</span> <span class="token operator">+</span> blog<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Boolean</span> isMember <span class="token operator">=</span> stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isMember</span><span class="token punctuation">(</span>blogKey<span class="token punctuation">,</span> userId<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    blog<span class="token punctuation">.</span><span class="token function">setIsLike</span><span class="token punctuation">(</span><span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token constant">TRUE</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>isMember<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">likeBlog</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 判断当前用户是否点赞</span>
    <span class="token class-name">Long</span> userId <span class="token operator">=</span> <span class="token class-name">UserDtoHolder</span><span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> blogKey <span class="token operator">=</span> <span class="token constant">BLOG_LIKED_KEY</span> <span class="token operator">+</span> id<span class="token punctuation">;</span>
    <span class="token class-name">Boolean</span> isMember <span class="token operator">=</span> stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isMember</span><span class="token punctuation">(</span>blogKey<span class="token punctuation">,</span> userId<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token constant">FALSE</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>isMember<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 点赞</span>
        <span class="token keyword">boolean</span> isSuccess <span class="token operator">=</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">setSql</span><span class="token punctuation">(</span><span class="token string">&quot;liked = liked + 1&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>isSuccess<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>blogKey<span class="token punctuation">,</span> userId<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// 再点一次就是移除</span>
        <span class="token keyword">boolean</span> isSuccess <span class="token operator">=</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">setSql</span><span class="token punctuation">(</span><span class="token string">&quot;liked = liked - 1&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>isSuccess<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>blogKey<span class="token punctuation">,</span> userId<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="详情页点赞数据" tabindex="-1"><a class="header-anchor" href="#详情页点赞数据" aria-hidden="true">#</a> 详情页点赞数据</h3><p>根据点赞时间排序</p><p>sortedSet无ismember</p><p>查分数判断是否存在</p><p>zscore</p><p>排名</p><p>zrange key 0 4</p><h2 id="好友关注" tabindex="-1"><a class="header-anchor" href="#好友关注" aria-hidden="true">#</a> 好友关注</h2><h3 id="关注和取关" tabindex="-1"><a class="header-anchor" href="#关注和取关" aria-hidden="true">#</a> 关注和取关</h3><blockquote><p>逻辑删除,定时任务,空闲的时候在真正删除</p></blockquote><h3 id="共同关注" tabindex="-1"><a class="header-anchor" href="#共同关注" aria-hidden="true">#</a> 共同关注</h3><blockquote><p>但是直接放redis里是不是有点牵强</p></blockquote><p>求交集sinter</p><p>我觉得应该只要点击查共同关注的时候取当前用户和对方的关注取交集，可以借助redis也可以只用数据库语句</p><blockquote><p>MySql没有求交集和差集的语句，只能通过union改造</p></blockquote><h3 id="关注推送" tabindex="-1"><a class="header-anchor" href="#关注推送" aria-hidden="true">#</a> 关注推送</h3><blockquote><p>我记得哪里讲过推模式和拉模式 如果用户取消关注怎么保证统一性？</p></blockquote><p>feed流，投喂流，无限下拉刷新获取新的信息</p><p>Timeline：不做内容筛选，简单按照内容的发布顺序排序，常用于好友或关注。例如朋友圈</p><p>智能排序：推送用户感兴趣的</p><ul><li>拉模式：读扩散，只有读的时候才拉取，然后再按照时间排序</li><li>推模式：写扩散，发消息直接推送到所有</li><li>推拉结合：读写混合，发布者根据粉丝数目分为推拉，粉丝也根据活跃程度推拉</li></ul><h3 id="滚动分页查询收件箱" tabindex="-1"><a class="header-anchor" href="#滚动分页查询收件箱" aria-hidden="true">#</a> 滚动分页查询收件箱</h3><blockquote><p>不用时间戳而使用递增generateKey</p></blockquote><h3 id="附近商户功能" tabindex="-1"><a class="header-anchor" href="#附近商户功能" aria-hidden="true">#</a> 附近商户功能</h3><p>GEO数据类型，实际上是zset，geohash转score</p><h3 id="用户签到" tabindex="-1"><a class="header-anchor" href="#用户签到" aria-hidden="true">#</a> 用户签到</h3><p>bitMap</p><p>setbit getbit</p><h3 id="uv" tabindex="-1"><a class="header-anchor" href="#uv" aria-hidden="true">#</a> UV</h3><p>UV</p><p>PV</p>`,95);function h(f,g){const p=l("ExternalLinkIcon");return o(),c("div",null,[u,n("p",null,[n("a",k,[s("LocalDateTime"),t(p)])]),d,n("p",null,[s("多线程测试工具"),n("a",r,[s("jemeter"),t(p)])]),v,n("blockquote",null,[n("p",null,[s("数据库update行锁"),n("a",m,[s("https://blog.csdn.net/zhizhengguan/article/details/122112773"),t(p)])])]),b])}const w=e(i,[["render",h],["__file","heima-redis.html.vue"]]);export{w as default};
